---
- name: MacOS configuration
  hosts: all
  gather_facts: true
  become: false
  vars_files:
    - vars.yml
  vars:
    brew_bin_path: "{{ '/opt/homebrew/bin' if ansible_facts['machine'] == 'arm64' else '/usr/local/Homebrew/bin' }}"

  pre_tasks:
    - name: Set base formulae
      ansible.builtin.set_fact:
        formulae_to_install: "{{ base_formulae }}"
        casks_to_install: "{{ base_casks + brew_fonts }}"
      tags: always

    - name: Add optional brew formulae
      tags: never, full
      block:
        - name: Add development formulae and casks
          ansible.builtin.set_fact:
            formulae_to_install: "{{ formulae_to_install + devel_formulae }}"
            casks_to_install: "{{ casks_to_install + devel_casks }}"
          tags: devel

        - name: Add office formulae and casks
          ansible.builtin.set_fact:
            formulae_to_install: "{{ formulae_to_install + office_formulae }}"
            casks_to_install: "{{ casks_to_install + office_casks }}"
          tags: office

        - name: Add security formulae and casks
          ansible.builtin.set_fact:
            formulae_to_install: "{{ formulae_to_install + security_formulae }}"
            casks_to_install: "{{ casks_to_install + security_casks }}"
          tags: security

        - name: Add virtualization formulae and casks
          ansible.builtin.set_fact:
            formulae_to_install: "{{ formulae_to_install + v12n_formulae }}"
            casks_to_install: "{{ casks_to_install + v12n_casks }}"
          tags: v12n

        - name: Add navigation formulae and casks
          ansible.builtin.set_fact:
            formulae_to_install: "{{ formulae_to_install + navi_formulae }}"
            casks_to_install: "{{ casks_to_install + navi_casks }}"
          tags: navigation

  tasks:
    - name: Determine if homebrew is installed
      ansible.builtin.command:
        cmd: "{{ brew_bin_path }}/brew --version"
      register: validate_brew
      check_mode: false
      changed_when: false
      failed_when: validate_brew.rc != 0 and validate_brew.rc != 2

    - name: Ensure homebrew is installed
      ansible.builtin.shell:
        cmd: NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      become: false
      when: validate_brew.rc != 0

    - name: Get list of all installed Mac OS X Installer packages
      ansible.builtin.command:
        cmd: pkgutil --pkgs
      register: installed_pkgs
      check_mode: false
      changed_when: false

    - name: Ensure Rosetta 2 is installed
      ansible.builtin.command:
        cmd: /usr/sbin/softwareupdate --install-rosetta --agree-to-license
      when: '"com.apple.pkg.RosettaUpdateAuto" not in installed_pkgs.stdout'

    - name: Update Homebrew repositories
      community.general.homebrew:
        update_homebrew: true
      changed_when: false
      tags: always

    - name: Ensure extra Homebrew Taps are present
      community.general.homebrew_tap:
        name: "{{ item }}"
      with_items: "{{ brew_taps }}"
      tags: always

    - name: Ensure Homebrew Formulae are present
      community.general.homebrew:
        name: "{{ item }}"
      with_items: "{{ formulae_to_install }}"
      tags: always

    - name: Ensure Homebrew Casks are present
      community.general.homebrew_cask:
        name: "{{ item }}"
        accept_external_apps: true
      with_items: "{{ casks_to_install }}"
      tags: always

    - name: Get list of all installed MAS Apps
      ansible.builtin.command:
        cmd: "{{ brew_bin_path }}/mas list"
      register: installed_apps
      check_mode: false
      changed_when: false
      tags: always

    - name: Ensure MAS apps are present
      ansible.builtin.command:
        cmd: "{{ brew_bin_path }}/mas install {{ item.id | default(item) }}"
      with_items: "{{ mas_installed_apps }}"
      when: (item.id | default(item) | string) not in installed_apps.stdout
      tags: mas, never, full

    - name: Clone Oh My ZSH repository
      ansible.builtin.git:
        repo: "{{ omz_repository }}"
        dest: "{{ omz_directory }}"
        depth: 1
        update: false
        version: "master"
      tags: always

    - name: Clone Powerlevel10k repository
      ansible.builtin.git:
        repo: "{{ p10k_repository }}"
        dest: "{{ p10k_directory }}"
        depth: 1
        update: false
        version: "master"
      tags: always

    - name: Ensure configuration files are present
      ansible.builtin.template:
        src: "{{ item.source }}"
        dest: "{{ item.destination }}"
        backup: "{{ item.backup }}"
        mode: "{{ item.mode }}"
      with_items: "{{ configuration_templates }}"
      tags: always

    - name: Ensure configuration files are present
      ansible.builtin.copy:
        src: "{{ item.source }}"
        dest: "{{ item.destination }}"
        backup: "{{ item.backup }}"
        mode: "{{ item.mode }}"
      with_items: "{{ configuration_files }}"
      tags: always
